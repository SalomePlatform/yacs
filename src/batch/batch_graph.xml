<?xml version='1.0' encoding='iso-8859-1' ?>
<proc name="batch_graph">
   <property name="DefaultStudyID" value="1"/>
   <type name="string" kind="string"/>
   <struct name="Engines/dataref">
      <member name="ref" type="string"/>
   </struct>
   <type name="bool" kind="bool"/>
   <sequence name="boolvec" content="bool"/>
   <type name="double" kind="double"/>
   <sequence name="dblevec" content="double"/>
   <objref name="file" id="file"/>
   <type name="int" kind="int"/>
   <sequence name="intvec" content="int"/>
   <objref name="pyobj" id="python:obj:1.0"/>
   <sequence name="stringvec" content="string"/>

   <container name="DefaultContainer">
      <property name="container_name" value="FactoryServer"/>
      <property name="hostname" value="localhost"/>
   </container>

   <inline name="Submit">
      <script><code><![CDATA[
# Francis Kloss, Bernard Secher, CEA/LGLS, 2010
# ---------------------------------------------

print "BATCH: started"
#      --------------

import os

import loader

import SALOME
import Engines
import orbmodule

print "BATCH: Submit: input ports"
#      --------------------------

print "BATCH: input port: machine     = ", machine
print "BATCH: input port: hostname    = ", hostname
print "BATCH: input port: infiles     = ", infiles
print "BATCH: input port: outfiles    = ", outfiles
print "BATCH: input port: results dir = ", results_dir

status = True

graph = "/tmp/graph_user.xml"

print "BATCH: Load graph for informations"
#      ----------------------------------

if status:
    try:
        yloader   = loader.YACSLoader()
        graphy    = yloader.load(graph)
        graphname = graphy.getName()

        nprocs = 0
        for c in graphy.containerMap.values():
            n = c.getProperty("nb_node")
            p = c.getProperty("nb_proc_per_node")
            if (n=="") or (p==""):
                nprocs += 1
            else:
                nprocs += int(n) * int(p)

    except Exception, message:
        print "BATCH: Exception: in load graph for informations: ", message
        status    = False
        graphname = "unknown"
        nprocs    = 1

print "BATCH: set parameters"
#      ---------------------

delay  = 1

data = os.environ["YACS_ROOT_DIR"] + "/share/salome/resources/yacs/"

print "BATCH: graph      = ", graph
print "BATCH: graph name = ", graphname
print "BATCH: nb. procs  = ", nprocs
print "BATCH: delay      = ", delay
print "BATCH: data       = ", data

print "BATCH: set: resource parameters"
#      -------------------------------

# machine name if given else automatic
r_name = machine

# host name if given else automatic
r_hostname = hostname

# required operating system
r_os = ""

# if given list of components that could be loaded on the container
r_componentList = []

# required number of proc
r_nb_proc = nprocs

# required memory size
r_mem_mb = 0

# required frequency
r_cpu_clock = 0

# required number of node
r_nb_node = 0

# required number of proc per node
r_nb_proc_per_node = 0

# resource management policy : first, cycl, altcycl or best (can be extended)
r_policy = ""

# resource list
r_resList = []

if status:
    try:
        params = Engines.ResourceParameters(r_name, r_hostname, r_os, r_componentList, r_nb_proc, r_mem_mb, r_cpu_clock, r_nb_node, r_nb_proc_per_node , r_policy, r_resList)

    except Exception, message:
        print "BATCH: Exception: in resource parameters: ", message
        status = False

print "BATCH: set: job parameters"
#      --------------------------

# Job Type - Must be equal "yacs_file"
j_job_type = "yacs_file"

# graph file name
j_job_file = graph

j_env_file = ""
j_in_files = infiles
j_out_files = outfiles
j_work_directory = ""
j_local_directory = ""
j_result_directory = results_dir
j_maximum_duration = ""
j_resource_required = params
j_queue = ""

if status:
    try:
        job_params = Engines.JobParameters(j_job_type, j_job_file, j_env_file, j_in_files, j_out_files, j_work_directory, j_local_directory, j_result_directory, j_maximum_duration, j_resource_required, j_queue)

    except Exception, message:
        print "BATCH: Exception: in job parameters: ", message
        status = False

print "BATCH: submiting"
#      ----------------

if status:
    try:
        client = orbmodule.client()
        obj_sl = client.Resolve("SalomeLauncher")
        SalomeLauncher = obj_sl._narrow(Engines.SalomeLauncher)

        jobId = SalomeLauncher.createJob(job_params)
        print "BATCH: job ID = ", jobId
        SalomeLauncher.launchJob(jobId)

    except Exception, message:
        print "BATCH: Exception: in submiting: ", message
        jobId  = None
        status = False

print "BATCH: Submit: set output port"
#      ------------------------------

state = {}

state["DATA"     ] = data
state["DELAY"    ] = delay
state["JOBID"    ] = jobId
state["STATUS"   ] = status
state["LAUNCHER" ] = SalomeLauncher
state["GRAPH"    ] = graph
state["GRAPHNAME"] = graphname
state["MACHINE"  ] = machine
state["HOSTNAME" ] = hostname

]]></code></script>
      <inport  name="machine"     type="string"/>
      <inport  name="hostname"    type="string"/>
      <inport  name="infiles"     type="stringvec"/>
      <inport  name="outfiles"    type="stringvec"/>
      <inport  name="results_dir" type="string"/>
      <outport name="state"       type="bool"/>
   </inline>

   <inline name="Pending">
      <script><code><![CDATA[
# Francis Kloss, CEA/LGLS, 2009
# -----------------------------

import time

print "BATCH: Pending: get input port"
#      ------------------------------

delay          = state["DELAY"   ]
jobId          = state["JOBID"   ]
status         = state["STATUS"  ]
SalomeLauncher = state["LAUNCHER"]

print "BATCH: Waiting"
#      --------------

if status:
    try:
        stat = SalomeLauncher.getJobState(jobId)
        print "BATCH: status = ", stat
        while (stat == "CREATED" or stat == "QUEUED" ):
            time.sleep(delay)
            stat = SalomeLauncher.getJobState(jobId)
            print "BATCH: status = ", stat

    except Exception, message:
        print "BATCH: Exception: in waiting: ", message
        status = False

print "BATCH: Pending: set output port"
#      -------------------------------

state["STATUS"] = status

]]></code></script>
      <inport  name="state" type="bool"/>
      <outport name="state" type="bool"/>
   </inline>

   <inline name="Running">
      <script><code><![CDATA[
# Francis Kloss, CEA/LGLS, 2009
# -----------------------------

import time

print "BATCH: Running: get input port"
#      ------------------------------

delay          = state["DELAY"   ]
jobId          = state["JOBID"   ]
status         = state["STATUS"  ]
SalomeLauncher = state["LAUNCHER"]

print "BATCH: launched"
#      ---------------

if status:
    try:
        stat = SalomeLauncher.getJobState(jobId)
        print "BATCH: status = ", stat
        while (stat == "RUNNING"):
            time.sleep(delay)
            stat = SalomeLauncher.getJobState(jobId)
            print "BATCH: status = ", stat

    except Exception, message:
        print "BATCH: Exception: in waiting: ", message
        status = False

print "BATCH: get results"
#      ------------------

if status:
    try:
        if(stat == "FINISHED" ):    
          SalomeLauncher.getJobResults(jobId,"")
        else:
          SalomeLauncher.removeJob(jobId)

    except Exception, message:
        print "BATCH: Exception: in get results: ", message
        status = False

print "BATCH: Running: set output ports"
#      --------------------------------

state["STATUS"] = status

print "BATCH: finished"
#      ---------------
]]></code></script>
      <inport  name="state"    type="bool"/>
      <outport name="state"    type="bool"/>
   </inline>

   <inline name="Alarm">
      <script><code><![CDATA[
# Francis Kloss, CEA/LGLS, 2009
# -----------------------------

print "ALARM: started"
#      --------------

import os
import time

print "ALARM: get input ports"
#      ----------------------

status    = state["STATUS"   ]
graph     = state["GRAPH"    ]
graphname = state["GRAPHNAME"]
machine   = state["MACHINE"  ]
hostname  = state["HOSTNAME" ]
data      = state["DATA"     ]

print "ALARM: input port: status = ", status
print "ALARM: input port: mail   = ", mail
print "ALARM: input port: popup  = ", popup
print "ALARM: input port: sound  = ", sound
print "ALARM: input port: speak  = ", speak

print "ALARM: set parameters"
#      ---------------------

if status:
    print "ALARM: job well finished"
    colo = "1"
    word = data + "good.txt"
    sono = data + "good.wav"
else:
    print "ALARM: job BAD finished"
    colo = "0"
    word = data + "bad.txt"
    sono = data + "bad.wav"

fic = file(word, 'r')
txt = fic.read()
fic.close()

stamp = time.strftime("%a %d %b %Y %H:%M:%S")

message = ""
message = message + "Timestamp : " + stamp     + ".\n"
message = message + "Graph name: " + graphname + ".\n"
message = message + "File  name: " + graph     + ".\n"
message = message + "Machine   : " + machine   + ".\n"
message = message + "Hostname  : " + hostname  + ".\n"
message = message + "Message   : " + txt       + "Mister Y.B.\n"

print "ALARM: message = ", message

cmd_mail   = "mail"
cmd_sound  = "mplayer"
cmd_speak  = "festival --tts"

print "ALARM: command: mail  = ", cmd_mail
print "ALARM: command: sound = ", cmd_sound
print "ALARM: command: speak = ", cmd_speak

print "ALARM: mail"
#      -----------

if mail!="":
    print "ALARM: send a mail"
    cmd = "echo \"" + message + "\" | " + cmd_mail + " -s YACS_Batch " + mail
    print "ALARM: send a mail command: ", cmd
    os.system(cmd)
else:
    print "ALARM: no send a mail"

print "ALARM: sound"
#      ------------

if sound:
    print "ALARM: sound effect"
    cmd = cmd_sound + " " + sono
    print "ALARM: sound command: ", cmd
    os.system(cmd)
else:
    print "ALARM: no sound effect"

print "ALARM: speak"
#      ------------

if speak:
    print "ALARM: speak effect"
    cmd = "( echo \"" + message + "\" | " + cmd_speak + " )&"
    print "ALARM: speak command: ", cmd
    os.system(cmd)
else:
    print "ALARM: no speak effect"

print "ALARM: popup"
#      ------------

if popup:
    print "ALARM: popup effect"
    cmd = "python " + data + "batch_alarm.py " + colo + " \"" + message + "\""
    print "ALARM: popup command: ", cmd
    os.system(cmd)
else:
    print "ALARM: no popup effect"

print "ALARM: finished"
#      ---------------
]]></code></script>
      <inport name="state" type="bool"/>
      <inport name="mail"  type="string"/>
      <inport name="popup" type="bool"/>
      <inport name="sound" type="bool"/>
      <inport name="speak" type="bool"/>
   </inline>

   <control> <fromnode>Submit</fromnode>  <tonode>Pending</tonode> </control>
   <control> <fromnode>Running</fromnode> <tonode>Alarm</tonode>   </control>
   <control> <fromnode>Pending</fromnode> <tonode>Running</tonode> </control>

   <datalink control="false">
      <fromnode>Submit</fromnode> <fromport>state</fromport>
      <tonode>Pending</tonode> <toport>state</toport>
   </datalink>

   <datalink control="false">
      <fromnode>Running</fromnode> <fromport>state</fromport>
      <tonode>Alarm</tonode> <toport>state</toport>
   </datalink>

   <datalink control="false">
      <fromnode>Pending</fromnode> <fromport>state</fromport>
      <tonode>Running</tonode> <toport>state</toport>
   </datalink>

   <parameter>
      <tonode>Submit</tonode><toport>machine</toport>
      <value><string>titane</string></value>
   </parameter>

   <parameter>
      <tonode>Submit</tonode><toport>hostname</toport>
      <value><string>titane.ccc.cea.fr</string></value>
   </parameter>

   <parameter>
      <tonode>Submit</tonode><toport>infiles</toport>
      <value><array><data>
      </data></array></value>
   </parameter>

   <parameter>
      <tonode>Submit</tonode><toport>outfiles</toport>
      <value><array><data>
      </data></array></value>
   </parameter>

   <parameter>
      <tonode>Submit</tonode><toport>results_dir</toport>
      <value><string>/tmp</string></value>
   </parameter>

   <parameter>
      <tonode>Alarm</tonode><toport>mail</toport>
      <value><string></string></value>
   </parameter>

   <parameter>
      <tonode>Alarm</tonode><toport>popup</toport>
      <value><boolean>1</boolean></value>
   </parameter>

   <parameter>
      <tonode>Alarm</tonode><toport>sound</toport>
      <value><boolean>1</boolean></value>
   </parameter>

   <parameter>
      <tonode>Alarm</tonode><toport>speak</toport>
      <value><boolean>1</boolean></value>
   </parameter>

   <presentation name="Submit"   x="10"  y="85" width="230" height="230"/>
   <presentation name="Pending"  x="255" y="85" width="230" height="110"/>
   <presentation name="Running"  x="500" y="85" width="230" height="110"/>
   <presentation name="Alarm"    x="745" y="85" width="230" height="230"/>
   <presentation name="__ROOT__" x="0"   y="0"  width="980" height="320"/>
</proc>
